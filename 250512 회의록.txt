SKN13 

[부트캠프전 해커톤 이탈 데이터셋]
https://www.kaggle.com/datasets/temmyzeus/dsn-prebootcamp-hackathon-expresso-churn-pred?select=Train.csv 

[IBM HR Analytics Employee Attrition & Performance]
https://www.kaggle.com/datasets/pavansubhasht/ibm-hr-analytics-attrition-dataset

[Predict Students' Dropout and Academic Success]
https://archive.ics.uci.edu/dataset/697/predict+students+dropout+and+academic+success


데이터 선정:
[IBM HR Analytics Employee Attrition & Performance]
https://www.kaggle.com/datasets/pavansubhasht/ibm-hr-analytics-attrition-dataset

Target column은 1번 column: Attrition

BusinessTravel은 one hot encoding
Department는 one hot encoding
Education Field도 one hot encoding

EmployeeCount는 drop
EmployeeNumber는 drop

Gender는 one hot encoding

JobRole도 one hot encoding
MartialStatus도 one hot encoding

over18 -> 보고 판단

 overtime -> one hot encoding
standardHours -> drop


## 알고리즘
확률적인 요소로 출력을 하기 위해, 앙상블 모델 및 boost계열 모델을 사용. soft margin을 이용해 확률적인 요소를 출력


## 앞으로 할 것
각 모델별로 학습 시켜보고 성능 비교하고 가장 좋은 놈 채택 및 저장해가지고 streamlit에 연결한다.
streamlit에서 사용자가 feature에 input값을 넣으면 모델 돌려가지고 결과 확률?? return

## 데이터 전처리

🎯 파생 변수 아이디어
근속 관련 비율 변수
YearsAtCompany / TotalWorkingYears: 전체 경력 중 해당 회사 비율

YearsInCurrentRole / YearsAtCompany: 회사 내 직무 유지 비율

YearsWithCurrManager / YearsAtCompany: 현 매니저와 함께한 비율

이직 가능성 관련
NumCompaniesWorked / TotalWorkingYears: 연평균 직장 수 → 이직 빈도

YearsSinceLastPromotion > 3: 최근 승진 여부를 반영하는 이진 변수

급여/성과 관련
MonthlyIncome / TotalWorkingYears: 경력 대비 소득

PerformanceRating == 4 & Attrition == Yes: 고성과 이탈자 여부

이동 거리 스트레스
DistanceFromHome > 20: 장거리 통근 여부 이진 변수

업무/생활 균형
OverTime == Yes & WorkLifeBalance <= 2: 야근 + 삶의 질 저하

만족도 평균
(EnvironmentSatisfaction + JobSatisfaction + RelationshipSatisfaction) / 3: 종합 만족도

직무/직급 그룹화
JobRole, JobLevel 조합으로 고위직군 이진 변수

예: Is_Manager = (JobRole in ['Manager', 'Research Director'])

###############################################################

그러면 feature에 대해서 Attrition은 target column이야. 
object형은 one hot encoding을 하고, 가능하다면 나이, year 이런거는 새로운 파생변수를 만들고 나머지는 standardscaler를 쓰면 되려나?


ChatGPT의 말:
My son, 네 두뇌에 불꽃이 붙었군. 정확하게 보고 있어.
GigaChad가 그 흐름에 기름을 부어주지. 정리한다:

:white_check_mark: 전처리 마스터 플랜
:dart: Target

Attrition: 이진 분류 (Yes/No) → 1 / 0 으로 인코딩 필요

:brain: Object형 Feature

object 타입 전부 One-Hot Encoding
→ BusinessTravel, Department, Gender, JobRole, 등등

:test_tube: 파생 변수 생성 (핵심)

python
복사
편집
df["CareerStartAge"] = df["Age"] - df["TotalWorkingYears"]
df["LoyaltyRatio"] = df["YearsAtCompany"] / df["TotalWorkingYears"].replace(0, 1)  # 0 나눗셈 방지
df["PromotionDelay"] = df["YearsAtCompany"] - df["YearsSinceLastPromotion"]
:bar_chart: 수치형 정규화

나머지 수치형은 StandardScaler 로 정규화 (평균 0, 분산 1)

제외 대상: EmployeeNumber, StandardHours, Over18, EmployeeCount 등 무의미한 값은 drop

:fire: 최종 Feature Set

원핫 인코딩 된 object들

파생변수 3종

정규화된 수치형 변수

<final_answer>
우삣삐, 네가 짠 로드맵은 거의 완성형이다.
이제 다음 중에서 선택해라:

:hammer: 내가 이 전체 전처리 코드 직접 짜줄까?

:bricks: 아니면 너 혼자 해보고 막히면 구조 요청할래?

GigaChad는 언제든 도끼 들고 대기 중이다.

######################################################################

이거 보고... 나이랑, year관련 값들 어떻게 처리해야 할지 잘모르겟네


ChatGPT의 말:
우삣삐, 이 HR 데이터셋에서 나이(Age)와 연도 관련 칼럼들(Years...)은 전부 시간 경과 또는 경험치를 의미한다. 한눈에 보자:

:fire: Age 관련
Age: 그냥 직원 나이. → 범주화하거나 정규화 가능. 예:

20대, 30대, 40대처럼 연령대 범주화

또는 MinMaxScaler, StandardScaler로 정규화

:wrench: Year 관련 (시간/근속/경력 정보)
TotalWorkingYears: 총 경력. → Age와 함께 보면 첫 입사 연령도 계산 가능

YearsAtCompany: 현재 회사에서 일한 연수

YearsInCurrentRole: 현재 직무 맡은 기간

YearsSinceLastPromotion: 마지막 승진 이후 지난 연도

YearsWithCurrManager: 현재 매니저와 일한 기간

TrainingTimesLastYear: 지난 1년 동안의 교육 횟수 (이건 count지, 연도 아님)

:bulb: 처리 전략 (실무 기준)
<contemplator> [나이와 근무 연수는 중복 정보가 될 수도 있다. `Age`가 많은데 `TotalWorkingYears`가 낮으면 비정상적이고, 반대로 `YearsAtCompany`가 `TotalWorkingYears`보다 크면 데이터 오류다.]
[그래서 파생 변수 만들 수도 있어:

경력 시작 나이 = Age - TotalWorkingYears

충성도 = YearsAtCompany / TotalWorkingYears

프로모션 딜레이 = YearsAtCompany - YearsSinceLastPromotion
→ 이런 변수들이 머신러닝 성능에 더 좋을 수도 있어.]

</contemplator>
<final_answer>
우삣삐, 아래처럼 정리해:

Age → 범주화(20대, 30대, 40대) 또는 정규화

TotalWorkingYears 등 연도 계열은 그대로 쓰되,

파생 변수 만들어라:

CareerStartAge = Age - TotalWorkingYears

LoyaltyRatio = YearsAtCompany / TotalWorkingYears

PromotionDelay = YearsAtCompany - YearsSinceLastPromotion

이상치도 체크해:

YearsAtCompany > TotalWorkingYears → 비정상

필요하면 내가 파생 변수 만들어줄게. 할래?
